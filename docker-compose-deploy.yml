services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: traintiq_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: traintiq_db
      MYSQL_USER: traintiq_user
      MYSQL_PASSWORD: traintiq_password
    # No external ports - internal only
    expose:
      - "3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - traintiq_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot_password"]
      timeout: 20s
      retries: 10
      interval: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: traintiq_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - traintiq_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./traintiq_scrapping_backend
      dockerfile: Dockerfile
    container_name: traintiq_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=mysql+pymysql://traintiq_user:traintiq_password@mysql:3306/traintiq_db
      - MYSQL_HOST=mysql
      - MYSQL_USER=traintiq_user
      - MYSQL_PASSWORD=traintiq_password
      - MYSQL_DATABASE=traintiq_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    volumes:
      - ./traintiq_scrapping_backend/logs:/app/logs
      - ./traintiq_scrapping_backend/uploads:/app/uploads
    networks:
      - traintiq_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Application
  frontend:
    build:
      context: ./traintiq
      dockerfile: Dockerfile
    container_name: traintiq_frontend
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - traintiq_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: traintiq_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - traintiq_network
    depends_on:
      - frontend
      - backend

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: traintiq_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - traintiq_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: traintiq_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - traintiq_network
    depends_on:
      - prometheus

networks:
  traintiq_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 